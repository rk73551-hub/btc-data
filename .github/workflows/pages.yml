name: Mirror BTC data to GitHub Pages

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"  # every 15 minutes

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  EXEC: https://script.google.com/macros/s/AKfycbzsDjd0fYUiOLnEYnFkPETvXg4VdLXIqSXX5tUNB1oeJ8o2EqzXXjAVezaNXKMf0lWTHQ/exec
  CACHEBUST: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (default branch)
        uses: actions/checkout@v4

      - name: Create public dir
        run: mkdir -p public

      - name: Define robust fetch helper
        env:
          APITOKEN: ${{ secrets.APITOKEN }}
        run: |
          set -e
          cat > fetch_json.sh <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail
          # Usage: fetch_json OUTFILE key1=value1 key2=value2 ...
          # Always adds token + cachebust; validates content-type and JSON before writing OUTFILE.
          outfile="$1"; shift
          tmp="$(mktemp)"
          hdr="$(mktemp)"
          args=()
          for kv in "$@"; do
            args+=( --data-urlencode "$kv" )
          done
          curl -sS -L --fail --retry 6 --retry-all-errors --max-time 60 \
            -H "Accept: application/json" \
            --get "$EXEC" \
            --data-urlencode "token=${APITOKEN}" \
            --data-urlencode "cachebust=${CACHEBUST}" \
            "${args[@]}" \
            -D "$hdr" -o "$tmp"
          # Content-Type must be JSON
          grep -qi '^content-type: *application/json' "$hdr" || { echo "Not JSON content-type:"; cat "$hdr"; exit 1; }
          # Body must parse as JSON
          python - "$tmp" <<'PY'
import sys, json
with open(sys.argv[1], 'rb') as f:
    json.load(f)
PY
          mv "$tmp" "public/$outfile"
          BASH
          chmod +x fetch_json.sh

      # --- Sanity: health must return JSON
      - name: Sanity ping (health)
        env:
          APITOKEN: ${{ secrets.APITOKEN }}
        run: |
          ./fetch_json.sh health.json mode=health

      # --- Latest row (limit 1), include A:N via cols=1:14
      - name: Fetch latest row
        env:
          APITOKEN: ${{ secrets.APITOKEN }}
        run: |
          ./fetch_json.sh latest.json mode=ytd limit=1 cols=1:14

      # --- Last 24h (limit 24), include A:N
      - name: Fetch last 24h
        env:
          APITOKEN: ${{ secrets.APITOKEN }}
        run: |
          ./fetch_json.sh last-24h.json mode=ytd limit=24 cols=1:14

      # --- YTD since Jan 1, include A:N
      - name: Fetch YTD
        env:
          APITOKEN: ${{ secrets.APITOKEN }}
        run: |
          ./fetch_json.sh ytd.json mode=ytd since=2025-01-01T00:00:00Z limit=20000 cols=1:14

      # --- 90d dataset (A:N)
      - name: Fetch 90d dataset
        env:
          APITOKEN: ${{ secrets.APITOKEN }}
        run: |
          ./fetch_json.sh 90d.json mode=90d limit=2160 cols=1:14

      # --- Dashboard summary (full-by-default from Api.gs)
      - name: Fetch dashboard summary (strict)
        env:
          APITOKEN: ${{ secrets.APITOKEN }}
        run: |
          ./fetch_json.sh dashboard.json mode=dashboard

      - name: Write timestamp
        run: date -u +"%Y-%m-%dT%H:%M:%SZ" > public/timestamp.txt

      # Commit JSONs to gh-pages
      - name: Prepare gh-pages branch
        run: |
          set -e
          git fetch origin gh-pages || true
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout -B gh-pages origin/gh-pages
          else
            git checkout --orphan gh-pages
            git reset --hard
          fi
          cp -f public/latest.json public/last-24h.json public/ytd.json public/90d.json public/dashboard.json public/timestamp.txt .
          git add latest.json last-24h.json ytd.json 90d.json dashboard.json timestamp.txt
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -m "Update mirrored data (validated JSON)" || echo "No changes to commit"
          git push origin gh-pages

      # Also publish to Pages (artifact = /public)
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
